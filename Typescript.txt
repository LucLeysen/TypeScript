* Typescript fundamentals *
---------------------------

Typed superset of JavaScript       =>   typescriptlang.org

=>  any browser
    any host
    any os
    open source
    Tool support

=>  static typing
    encapsulation
    classes
    modules
    interfaces
    lambdas
    intellisense and syntax checking

Compiler

typescript (.ts file) => tsc => JavaScript

--- Keywords ---
* class
* constructor
* exports
* extends
* implements
* imports
* interface
* module / namespace = container
* public / private
* ...   = Rest parameter syntax
* => = Arrow syntax used by definitions and functions
* <typeName> = <> characters use to cast/convert between types
* : = separator between variable/parameter names and types

typescript plagound: http://www.typescriptlang.org/play/


--- Type Interference ---
var num = 2;  => num is of type number because 2 is a number

--- Type annotation ---
var num: number = 2;

* any = base type of everything

var any1;                       => type is any
var num1: number;               => Type annotation
var num2: number = 2;           => Type annotation setting the value
var num3 = 3;                   => Type Interference (number)
var num4 = num3 + 100;          => Type Interference (number)

var str1 = num1 + 'hi'          => this will work (num1 to string) Type Interference (string)

--- Dynamic                                <-->         Static ---
- TypeScript -------------------------------|---------- JavaScript -
Static typing (optional)                    |              Dynamic typing
Type safety in a compile-time feature       |              Type safety at run-time debugging

--- Ambiant declaration ---
declare var document;
document.title = "Hello";
(lib.d.ts file referenced by default)

--- Type definition Files (Declaration Source Files)---
/// <reference path="jquery.d.ts />     => Helps provide types for jquery
declare var $;
var data = "Hi John';
$("div").text(data);

https://github.com/Microsoft/TypeScript
/// <reference path="typings/knockout-2.2.d.ts/>

--- Primitive Types ---
* number
    var age: number = 2;
    var rating: number = 98.25;
* boolean
    var hasValue: boolean = true;
* string
    var firstName: string = 'Luc';
* arrays
    var names: string[] = ['John', 'Dan', 'Aaron', 'Fritz'];    => array
    var firstPerson = names[0];                                 => indexer
* null
    var num: number = null;
    var str: string = null;
    var isHappy: boolean = null;
    var customer: {} = null;

    Null type is a subtype of all primitives (except void and undefined).

    var age: number;                => undefined    type number
    var customer = undefined;       => undefined    type any

    undefined type is a subtype of all types.

--- Object Types ---
* Object literals
    var square = {h: 10, w: 20};
    var points: Object = { x: 10, y: 20};
* functions
    var multiply = function(x: number) {
        return x * x;
    };

    var multiplyMore: Function;
    multiplyMore: function (x: number){
        return x * x;
    }

    * x? => optional parameter

--- Functions ---
* parameter types (required or optional (?))
* arrow function expressions (lambda's)
    compact form of function expressions
    omit the function Keywords
    have scope of this
* void
    Used as the return type for functions that return no value
* var myFunc = function (h: number, w: number){
    return h * w;
}
    var myFunc = (h: number, w: number) => h * w;
* var greetMe: (msg: string) => void
    greetMe = function (msg){
        console.log(msg);
    }

* ===   =>  equal
* !==   =>  not equal

--- Class ---
* Fields
* Constructors
* Properties
* Functions

* Complex types

* casting
    var table : HTMLTableElement = <HTMLTableElement>document.createElement('table');

--- Type Definition files ---
* As you work with the DOM or other libraries you need a Type Definition file (*.d.ts file)
    lib.d.ts file is built-in of the box for the DOM and JavaScript
* Additional Type Definition files for 3th party scripts at:
    https://github.com/borisyankov/DefinitelyTyped
    http://definitelytyped.org

--- Extending types ---
* extends keyword => derives from
    class ChildClass extends ParentClass{
        constructor(){
            super();
        }
    }

--- Interfaces ---
* implements keyword => implementys interface
    class Engine implements IEngine{}
* interface extends baseInterface